spawn-at-startup "/usr/lib/polkit-kde-authentication-agent-1"
spawn-at-startup "/usr/lib/xdg-desktop-portal-kde"
spawn-at-startup "xwayland-satellite"
spawn-at-startup "waybar"
spawn-at-startup "waypaper" "--restore"
spawn-at-startup "dunst"
spawn-at-startup "swayidle" "-w"
// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
cursor {
    xcursor-theme "Bibata-Modern-Ice"
    xcursor-size 28
    hide-after-inactive-ms 5000
}

input {
    keyboard {
        xkb {
            layout "us"
            // options "ctrl:nocaps"
        }

        repeat-delay 400
        repeat-rate 25
        track-layout "global"
        numlock
    }

    touchpad {
        tap
        accel-profile "flat"
        scroll-method "two-finger"
        natural-scroll
    }

    mouse {
        accel-profile "flat"
        middle-emulation
    }

    warp-mouse-to-focus

    // focus-follows-mouse max-scroll-amount="100%"
}
// input {
//     keyboard {
//         xkb {
//             // You can set rules, model, layout, variant and options.
//             // For more information, see xkeyboard-config(7).
//
//             // For example:
//             layout "us"
//             // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
//         }
//
//         // Enable numlock on startup, omitting this setting disables it.
//         numlock
//     }
//
//     // Next sections include libinput settings.
//     // Omitting settings disables them, or leaves them at their default values.
//     touchpad {
//         // off
//         tap
//         // dwt
//         // dwtp
//         // drag false
//         // drag-lock
//         natural-scroll
//         // accel-speed 0.2
//         // accel-profile "flat"
//         // scroll-method "two-finger"
//         // disabled-on-external-mouse
//     }
//
//     mouse {
//         // off
//         // natural-scroll
//         accel-speed -0.8
//         accel-profile "flat"
//         // scroll-method "no-scroll"
//     }
//
//     trackpoint {
//         // off
//         // natural-scroll
//         // accel-speed 0.2
//         // accel-profile "flat"
//         // scroll-method "on-button-down"
//         // scroll-button 273
//         // middle-emulation
//     }
//
//     // Uncomment this to make the mouse warp to the center of newly focused windows.
//     warp-mouse-to-focus
//
//     // Focus windows and outputs automatically when moving the mouse into them.
//     // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
//     focus-follows-mouse max-scroll-amount="0%"
//
//
// }

output "eDP-1" {
    scale 1

    transform "normal"

    background-color "#303446"

    position x=0 y=0
}
// output "HDMI-A-1" {
//   mode "1920x1080@74.973"
//   position x=0 y=0
// }
//
// output "DP-1" {
//   mode "1920x1080@143.999"
//   variable-refresh-rate on-demand=true
//   position x=1920 y=0
//   focus-at-startup
// }

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // Set gaps around windows in logical pixels.
    gaps 6 

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    // preset-window-heights { }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    // default-column-width {}

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        off
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.

        width 1
        active-color "#f5c2e7"
        inactive-color "#45475a"

        // Color of the border around windows that request your attention.
        urgent-color "#f38ba8"

        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        // 
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        // 
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5 

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#000a"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }

    insert-hint {
        // off
        color "#f5c2e759"
    }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

// This line starts waybar, a commonly used bar for Wayland compositors.
// spawn-at-startup "waybar"
//
// // Start swaybg to show wallpaper
// spawn-at-startup "swww-daemon"
//
// // Start xwayland-satellite
// spawn-at-startup "xwayland-satellite"
// Or, if you built it by hand:
// spawn-at-startup "~/path/to/code/target/release/xwayland-satellite"

environment {
    DISPLAY ":0"
}

// Start steam
// spawn-at-startup "steam-native"

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    // slowdown 3.0
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

window-rule {
    geometry-corner-radius 8
    clip-to-geometry true
    opacity 0.95
}

window-rule {
    match app-id=r#"kitty$"# title="^tty-clock$"

    open-floating true
    default-column-width { proportion 0.3; }
    default-window-height { proportion 0.3; }
    default-floating-position x=7 y=7 relative-to="top-right"
    open-focused false
    opacity 0.97
}

window-rule {
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    match app-id=r#"firefox$"# title="^Library$"
    match app-id=r#"mpv$"#
    match app-id=r#"libresprite$"#
    match app-id=r#"waypaper$"#
    match app-id=r#"Audacity$"#

    open-floating true
    opacity 1.0
}

window-rule {
    match app-id=r#"firefox$"#
    match app-id=r#"chromium$"#
    match app-id=r#"vivaldi-stable$"#
    match app-id=r#"virt-manager$"#
    match app-id=r#"^com\.obsproject\.Studio$"#

    opacity 1.0
}

window-rule {
    match app-id=r#"^com\.obsproject\.Studio$"#

    min-width 876
}

binds {
    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Return { spawn "kitty"; }
    Mod+Space { spawn "rofi" "-show" "drun" "-config" "~/.config/rofi/sway.rasi"; }
    Ctrl+Space { spawn "fuzzel"; }
    Mod+F {spawn "firefox";}
    Mod+D {spawn "discord" "--enable-features=UseOzonePlatform" "--ozone-platform=wayland";}
    Mod+E {spawn "kitty" "-e" "yazi";}
    Mod+B {spawn "~/.config/waybar/launch.sh"; }

    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    XF86MonBrightnessUp cooldown-ms=50 allow-when-locked=true { spawn "brightnessctl" "s" "5%+"; }
    XF86MonBrightnessDown cooldown-ms=50 allow-when-locked=true { spawn "brightnessctl" "s" "5%-"; }

    Shift+XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.01+"; }
    Shift+XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.01-"; }

    Mod+Tab repeat=false { toggle-overview; }

    Mod+Q { close-window; }

    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Shift+Left  { move-column-left; }
    Mod+Shift+Down  { move-window-down; }
    Mod+Shift+Up    { move-window-up; }
    Mod+Shift+Right { move-column-right; }
    Mod+Shift+H     { move-column-left; }
    Mod+Shift+J     { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+L     { move-column-right; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Ctrl+Right      { focus-workspace-down; }
    Mod+Ctrl+Left        { focus-workspace-up; }
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }

    Mod+Alt+1 { move-window-to-workspace 1; }
    Mod+Alt+2 { move-window-to-workspace 2; }
    Mod+Alt+3 { move-window-to-workspace 3; }
    Mod+Alt+4 { move-window-to-workspace 4; }
    Mod+Alt+5 { move-window-to-workspace 5; }
    Mod+Alt+6 { move-window-to-workspace 6; }
    Mod+Alt+7 { move-window-to-workspace 7; }
    Mod+Alt+8 { move-window-to-workspace 8; }
    Mod+Alt+9 { move-window-to-workspace 9; }

    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+M { maximize-column; }
    Mod+C { center-column; }

    Mod+Minus { set-column-width "-5%"; }
    Mod+Equal { set-column-width "+5%"; }

    Mod+Shift+Minus { set-window-height "-5%"; }
    Mod+Shift+Equal { set-window-height "+5%"; }

    Mod+W       { toggle-window-floating; }
    Mod+Shift+W { switch-focus-between-floating-and-tiling; }

    Mod+Y { switch-layout "next"; }
    Mod+Shift+Y { switch-layout "prev"; }

    Print { screenshot-screen; }
    Alt+Print { screenshot; }
    Ctrl+Print { screenshot-window; }

    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { spawn "rofi" "-show" "menu" "-modi" "'menu:~/.local/share/rofi/scripts/rofi-power-menu-niri --choices=logout/suspend/reboot/shutdown'" "-config" "~/.config/rofi/power.rasi"; }

    Super+Alt+L { spawn "hyprlock"; }
    Mod+Shift+P { power-off-monitors; }

    Mod+Shift+C { center-window; }
}

hotkey-overlay {
  skip-at-startup
}

overview {
    backdrop-color "#1e1e2e"
    zoom 0.625
}

