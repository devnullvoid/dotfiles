[general]
default_module = "gg" # The module to run when no prefix is matched
empty_module = "app" # run with an empty prompt
exec_cmd = "bash -c" # The exec command of your shell, default to sh
# for example: "bach -c" for bash; "zsh -c" for zsh. This can also runs wm exec commands, like hyprctl dispatch exec
vi_mode = false # set true to use vi keybinds, false to use emacs keybinds; default to emacs
esc_to_abort = true # allow to quit with esc keypress; a useful option for vi users
cheatsheet_entry = "?" # when entered, otter-launcher will show a list of configured modules
cheatsheet_viewer = "less -R; clear" # the program that otter-launcher will pipe cheatsheet into
clear_screen_after_execution = true # useful when chafa image flash back after module execution
loop_mode = false # in loop mode, otter-launcher won't quit after running a module, useful when using scratchpad
external_editor = "" # if set, pressing ctrl+e (or pressing v in vi normal mode) will edit the input field in the specified program; default to no external editor
#callback = "" # if set, otter-launcher will run the command after a module is executed; for example, it can call swaymsg to adjust window size


# ASCII color codes are allowed with these options. However, \x1b should be replaced with \u001B (unicode escape) because the rust toml crate cannot read \x as an escaped character...
[interface]
# Run a shell command and make the stdout printed above the header
header_cmd = """
echo -e \" \u001B[34;1m  >\u001B[0m $USER@$HOSTNAME                \u001B[31m\u001B[0m $(cat /proc/loadavg | cut -d ' ' -f 1)  \u001B[33m󰍛\u001B[0m $(free -h | awk 'FNR == 2 {gsub(/i$/, "", $3); print $3}')\"
"""
header_cmd_trimmed_lines = 0 # Remove a number of lines from header_cmd output, in case of some programs printing excessive empty lines at the end of its output
# use three quotes to write longer commands
header = """    \u001B[34;1m> \u001B[0;1m"""
header_concatenate = false # print header and header_cmd output at the same line, default to false
list_prefix = "      "
selection_prefix = "    \u001B[31;1m> "
place_holder = "type and search..."
default_module_message = "      search the internet" # if set, the text will be shown when the default module is in use
empty_module_message = "" # the text to show when empty module is in use
suggestion_mode = "list" # available options: list, hint
suggestion_lines = 20 # length of the suggestion list, set to 0 to disable suggestions and tab completion
indicator_with_arg_module = "" # a sign showing whether the module should run with an argument
indicator_no_arg_module = ""
prefix_padding = 3 # format prefixes to have a unified width; prefixes will be padded with spaces to have a least specified number of chars
# below color options affect all modules; per-module coloring is allowed by using ascii color codes at each module's configurations
prefix_color = "\u001B[33m"
description_color = "\u001B[38m"
place_holder_color = "\u001B[30m"
hint_color = "\u001B[30m" # the color of hint mode suggestions

# [[modules]]
# description = "launch commands from the system"
# prefix = "cmd"
# cmd = "kitty --hold -e bash -c '{}'"
# with_argument = true
# url_encode = false

[[modules]]
description = "launch program in a new terminal"
prefix = "sh"
cmd = "setsid -f $TERM -e {}"
with_argument = true

[[modules]]
description = "network manager TUI"
prefix = "nm"
cmd = "setsid -f $TERM -e sh -c 'sleep 0.1 && nmtui'"

[[modules]]
description = "search archwiki"
prefix = "aw"
cmd = "setsid -f xdg-open https://wiki.archlinux.org/index.php?search='{}'"
with_argument = true
url_encode = true

[[modules]]
description = "search for arch packages"
prefix = "pac"
cmd = "setsid -f xdg-open https://archlinux.org/packages/?q='{}'"
with_argument = true
url_encode = true

[[modules]]
description = "search for aur packages"
prefix = "aur"
cmd = "setsid -f xdg-open https://aur.archlinux.org/packages?K='{}'"
with_argument = true
url_encode = true

# Modules are defined as followed
[[modules]]
description = "search with google"
prefix = "gg"
# try wm's exec command if 'setsid -f' does not work, eg. 'hyprctl dispatch exec'
cmd = "setsid -f xdg-open 'https://www.google.com/search?q={}'"
with_argument = true # If "with_argument" is true, the {} in the cmd value will be replaced with user input. If the field is not explicitly set, will be taken as false.
url_encode = true # "url_encode" should be true if the module is set to call webpages, as this ensures special characters in url being readable to browsers. It'd better be false with shell scripts. If the field is not explicitly set, will be taken as false.

[[modules]]
description = "launch desktop apps"
prefix = "app"
cmd = "sway-launcher-desktop"

# [[modules]]
# description = "launch desktop apps"
# prefix = "app"
# cmd = """
# desktop_file() {
# find /usr/share/applications -name "*.desktop" 2>/dev/null
# find /usr/local/share/applications -name "*.desktop" 2>/dev/null
# find "$HOME/.local/share/applications" -name "*.desktop" 2>/dev/null
# find /var/lib/flatpak/exports/share/applications -name "*.desktop" 2>/dev/null
# find "$HOME/.local/share/flatpak/exports/share/applications" -name "*.desktop" 2>/dev/null
# }
# selected="$(desktop_file | sed 's/.desktop$//g' | sort | fzf -m -d / --with-nth -1 --reverse --padding 1,3 --prompt 'Launch Apps: ')"
# [ -z "$selected" ] && exit
# echo "$selected" | while read -r line ; do setsid -f gtk-launch "$(basename $line)"; done
# """

[[modules]]
description = "select an emoji or special character"
prefix = "em"
cmd = "~/.config/otter-launcher/scripts/emoji-picker.sh"

[[modules]]
description = "search in github"
prefix = "gh"
cmd = "setsid -f xdg-open https://github.com/search?q='{}'"
with_argument = true
url_encode = true

[[modules]]
description = "cambridge dict"
prefix = "dc"
cmd = "setsid -f xdg-open 'https://dictionary.cambridge.org/dictionary/english/{}'"
with_argument = true
url_encode = true

# fzf and fd are needed to run these functions
[[modules]]
description = "open files with fzf"
prefix = "fo"
cmd = "fd --type f | fzf | setsid -f xargs -r -I {} xdg-open '{}'"

[[modules]]
description = "open folders with fzf"
prefix = "yz"
cmd = "fd --type d | fzf | xargs -r -I {} yazi '{}'"

[[modules]]
description = "switch wifi connection"
prefix = "wifi"
cmd = """
selected=$(echo -e "$(nmcli -f ssid device wifi list | awk '{print $1}' | grep -v SSID)" | fzf --reverse --padding 1,3 --prompt 'Available Networks: ')

if [ "$(nmcli connection show --active | rg "$selected")" ]
  then
    nmcli connection down "$selected"
  else
    nmcli connection up "$selected"
fi
"""

[[modules]]
description = "connect to a vpn"
prefix = "vpn"
cmd = """
# Get list of VPN connections with their status
declare -a menu_items
while IFS= read -r vpn; do
    if [ -n "$vpn" ]; then
        if nmcli connection show --active | rg -q "$vpn"; then
            menu_items+=("$vpn (UP)")
        else
            menu_items+=("$vpn (DOWN)")
        fi
    fi
done < <(nmcli connection show | rg ' vpn | wireguard ' | cut -d ' ' -f 1)

# Show menu with fzf
selected=$(printf "%s\\n" "${menu_items[@]}" | fzf --reverse --padding 1,3 --prompt 'VPNs: ')

# Exit if nothing selected
[ -z "$selected" ] && exit 0

# Extract VPN name and status
vpn_name=$(echo "$selected" | cut -d' ' -f1)
status=$(echo "$selected" | grep -o '(.*)'  | tr -d '()')

# Toggle connection
if [ "$status" = "UP" ]; then
    nmcli connection down "$vpn_name"
    notify-send "VPN" "Disconnected from $vpn_name"
else
    nmcli connection up "$vpn_name" --ask
    notify-send "VPN" "Connected to $vpn_name"
fi
"""


[[modules]]
description = "connect to tailscale"
prefix = "\u001B[33mtsc\u001B[0m"
#cmd = "$HOME/.config/otter-launcher/scripts/tsc"
cmd = """
entries="start stop"
selected=$(printf '%s\n' $entries | fzf --reverse --padding 1,3 --prompt 'Tailscale: ' | awk '{print tolower($1)}')

case $selected in
  start)
    /usr/bin/pkexec sh -c "systemctl start tailscaled && tailscale up"
    ;;
  stop)
    /usr/bin/pkexec sh -c "tailscale down && systemctl stop tailscaled"
    ;;
esac

"""

[[modules]]
description = "manage wireguard connections"
prefix = "wg"
cmd = """
# Get all WireGuard profiles
readarray -t profile_files < <(sudo find /etc/wireguard -type f -name "*.conf" | sort)

# Check if any profiles exist
if [ ${#profile_files[@]} -eq 0 ]; then
    notify-send "WireGuard" "No WireGuard profiles found in /etc/wireguard/"
    exit 1
fi

# Build menu with status
declare -a menu_items
for file in "${profile_files[@]}"; do
    profile=$(basename "$file")
    interface="${profile%.conf}"

    # Check if interface is active
    if sudo wg show interfaces | grep -q "$interface"; then
        status="UP"
    else
        status="DOWN"
    fi

    menu_items+=("$profile ($status)")
done

# Show menu with fzf
selected=$(printf "%s\\n" "${menu_items[@]}" | fzf --reverse --padding 1,3 --prompt 'WireGuard Profiles: ')

# Exit if nothing selected
[ -z "$selected" ] && exit 0

# Extract profile name and status
profile=$(echo "$selected" | cut -d' ' -f1)
status=$(echo "$selected" | grep -o '(.*)'  | tr -d '()')
interface="${profile%.conf}"

# Toggle connection
if [ "$status" = "UP" ]; then
    sudo wg-quick down "$interface"
    notify-send "WireGuard" "Disconnected from $interface"
else
    sudo wg-quick up "$interface"
    notify-send "WireGuard" "Connected to $interface"
fi
"""

[[modules]]
description = "CPU governor control (performance/powersave)"
prefix = "cpu"
cmd = "~/.config/otter-launcher/scripts/cpu-governor.sh"

# [[modules]]
# description = "show CPU status and frequencies"
# prefix = "cpus"
# cmd = "~/.config/otter-launcher/scripts/cpu-status.sh"

[[modules]]
description = "power menu"
prefix = "po"
cmd = """
function launch_prog {
    if [[ -n $1 ]]; then
        case $1 in
            "logout")
	      session=`loginctl session-status | head -n 1 | awk '{print $1}'`
	      loginctl terminate-session $(loginctl session-status | head -n 1 | awk '{print $1}')
              ;;
            "suspend")
              systemctl suspend
              ;;
            "hibernate")
              systemctl hibernate
              ;;
            "reboot")
	      systemctl reboot
              ;;
            "shutdown")
              systemctl poweroff
              ;;
        esac
    else echo 'exit without input...'
    fi
}

launch_prog $(echo -e 'reboot\nshutdown\nlogout\nsuspend\nhibernate' | fzf --reverse --print-query --no-scrollbar --padding 1,3 --color=gutter:-1 --bind 'ctrl-t:execute-silent( setsid st -z 14 -e {q} & exit & )+abort' --prompt 'Power Menu: ' | tail -1)
"""
