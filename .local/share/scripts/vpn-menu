#!/bin/bash

# vpn-menu - A script for managing VPN connections with various fuzzy finders
# Supports both GUI (fuzzel, rofi, wofi) and TUI (fzf, skim, television) selectors

# Default menu program (can be overridden with environment variable)
MENU_PROGRAM=${MENU_PROGRAM:-fzf}

# Define colors for TUI output
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
BOLD=$'\033[1m'
NC=$'\033[0m' # No Color

# Menu command arguments based on the launcher type
case "$MENU_PROGRAM" in
    rofi)
        MENU_CMD="rofi -dmenu -i -p 'VPN Connection:'"
        USE_COLOR=false
        ;;
    wofi)
        MENU_CMD="wofi --dmenu -p 'VPN Connection:'"
        USE_COLOR=false
        ;;
    fuzzel)
        MENU_CMD="fuzzel --dmenu -p 'VPN Connection:'"
        USE_COLOR=false
        ;;
    bemenu)
        MENU_CMD="bemenu -i -p 'VPN Connection:'"
        USE_COLOR=false
        ;;
    walker)
        MENU_CMD="walker --dmenu -p 'VPN Connection:'"
        USE_COLOR=false
        ;;
    fzf)
        MENU_CMD="fzf --reverse --padding 1,3 --prompt 'VPN Connection: ' --ansi"
        USE_COLOR=true
        ;;
    sk|skim)
        MENU_CMD="sk --reverse --prompt 'VPN Connection: ' --ansi"
        USE_COLOR=true
        ;;
    # television|tv)
    #     MENU_CMD="tv --reverse --prompt 'VPN Connection: ' --ansi"
    #     USE_COLOR=true
    #     ;;
    *)  # Default to dmenu
        MENU_CMD="dmenu -i -p 'VPN Connection:'"
        USE_COLOR=false
        ;;
esac

# Function to get profile status (up/down)
get_status() {
    local profile="$1"
    if nmcli connection show --active | grep -q "$profile"; then
        echo "UP"
    else
        echo "DOWN"
    fi
}

# Get all WireGuard connections from NetworkManager
readarray -t wg_connections < <(nmcli connection show | grep " wireguard " | cut -d ' ' -f 1)

if [ ${#wg_connections[@]} -eq 0 ]; then
    echo "No WireGuard connections found in NetworkManager" >&2
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "WireGuard" "No WireGuard connections found in NetworkManager"
    fi
    exit 1
fi

# Build menu with status - using an array for cleaner handling
declare -a menu_items
for conn in "${wg_connections[@]}"; do
    status=$(get_status "$conn")
    if [ "$USE_COLOR" = true ]; then
        # Colorized output for TUI
        if [ "$status" = "UP" ]; then
            menu_items+=("$(printf "%s\t%s●%s %s%s%s" "$conn" "$GREEN" "$NC" "$BOLD" "UP" "$NC")")
        else
            menu_items+=("$(printf "%s\t%s●%s %s%s%s" "$conn" "$RED" "$NC" "$BOLD" "DOWN" "$NC")")
        # fi
    else
        # Plain output for GUI
        menu_items+=("$conn [$status]")
    fi
done

# Join array elements with newlines for the menu
if [ "$USE_COLOR" = true ]; then
    # For TUI: Use printf to preserve colors, then format with column
    printf "%s\n" "${menu_items[@]}" | column -t -s $'\t' > /tmp/vpn_menu_$$
    menu_text=$(cat /tmp/vpn_menu_$$)
    rm -f /tmp/vpn_menu_$$
else
    # For GUI: Simple newline separation
    menu_text=$(printf "%s\n" "${menu_items[@]}")
fi

# Use the selected menu program to choose a profile
if [ "$MENU_PROGRAM" = "fzf" ]; then
    selected=$(echo "$menu_text" | fzf --reverse --padding 1,3 --prompt 'VPN Connection: ' --ansi --no-multi)
elif [ "$MENU_PROGRAM" = "sk" ] || [ "$MENU_PROGRAM" = "skim" ]; then
    selected=$(echo "$menu_text" | sk --reverse --prompt 'VPN Connection: ' --ansi)
else
    selected=$(echo "$menu_text" | eval "$MENU_CMD")
fi

# Exit if nothing was selected
if [ -z "$selected" ]; then
    exit 0
fi

# Extract connection name and status from selection
if [ "$USE_COLOR" = true ]; then
    # For TUI: Extract name before the color codes
    conn_name=$(echo "$selected" | awk '{print $1}')
    status=$(echo "$selected" | grep -o 'UP\|DOWN')
else
    # For GUI: Extract from bracketed format
    conn_name=$(echo "$selected" | cut -d' ' -f1)
    status=$(echo "$selected" | grep -o '\[.*\]' | tr -d '[]')
fi

# Toggle connection based on current status
if [ "$status" = "UP" ]; then
    # Disconnect
    nmcli connection down "$conn_name"

    # Send notification if notify-send is available
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "WireGuard" "Disconnected from $conn_name"
    else
        echo "Disconnected from $conn_name"
    fi
else
    # Connect
    nmcli connection up "$conn_name"

    # Send notification if notify-send is available
    if command -v notify-send >/dev/null 2>&1; then
        notify-send "WireGuard" "Connected to $conn_name"
    else
        echo "Connected to $conn_name"
    fi
fi

exit 0
